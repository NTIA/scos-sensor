# -*- sh -*-

# Copy env.template to env and modify


# Mark all the following variables for export
set -o allexport

#Any names here will be added as additional users with the
#specified additional user password
ADDITIONAL_USER_NAMES="" # comma separated
ADDITIONAL_USER_PASSWORD=""

# If admin user email and password set, admin user will be generated.
ADMIN_EMAIL="admin@example.com"
ADMIN_NAME=admin
ADMIN_PASSWORD=password

# set to CERT to enable scos-sensor certificate authentication
AUTHENTICATION=TOKEN

BASE_IMAGE=ghcr.io/ntia/scos-tekrsa/tekrsa_usb:0.2.3
# Default callback api/results
# Set to CERT for certificate authentication
CALLBACK_AUTHENTICATION=TOKEN
# Set to false to disable SSL cert verification in the callback POST request
CALLBACK_SSL_VERIFICATION=false

#Set the number of seconds before timeout in postback when a scheduled
#action completes
CALLBACK_TIMEOUT=2

# SECURITY WARNING: don't run with debug turned on in production!
# Use either true or false
DEBUG=true

DEVICE_MODEL=RSA507A

# Use latest as default for local development
DOCKER_TAG=latest

# A space-separated list of domain names and IPs
DOMAINS="localhost $(hostname -d) $(hostname -s).local"

ENCRYPT_DATA_FILES=true

ENCRYPTION_KEY="$(python3 -c 'import secrets; import base64; print(base64.b64encode(secrets.token_bytes(32)).decode("utf-8"))')"

FQDN="$(hostname -f)"

GIT_BRANCH="git:$(git rev-parse --abbrev-ref HEAD)@$(git rev-parse --short HEAD)"

IPS="$(hostname -I) 127.0.0.1"

# Session password for Postgres. Username is "postgres".
# SECURITY WARNING: generate unique key with something like
#                   `openssl rand -base64 12`
POSTGRES_PASSWORD="$(python3 -c 'import secrets; import base64; print(base64.b64encode(secrets.token_bytes(32)).decode("utf-8"))')"

# set default manager FQDN and IP to this machine
MANAGER_FQDN="$(hostname -f)"
MANAGER_IP="$(hostname -I | cut -d' ' -f1)"

# Sensor certificate with private key used as client cert for callback URL
# Paths relative to configs/certs
PATH_TO_CLIENT_CERT=sensor01.pem
# Trusted Certificate Authority certificate to verify callback URL server certificate
PATH_TO_VERIFY_CERT=scos_test_ca.crt

REPO_ROOT=$(git rev-parse --show-toplevel)
# Get scos-sensor branch name
SCOS_SENSOR_GIT_TAG="$(git describe --tags)"

# https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-SECRET_KEY
# SECURITY WARNING: generate unique key with `manage.py generate_secret_key`
SECRET_KEY="$(python3 -c 'import secrets; print(secrets.token_urlsafe(64))')"

SIGAN_CLASS=TekRSASigan
SIGAN_MODULE=scos_tekrsa.hardware.tekrsa_sigan

# SECURITY WARNING: You should be using certs from a trusted authority.
#                   If you don't have any, try letsencrypt or a similar service.
# Provide the absolute path to your ssl certificate and key
# Paths relative to configs/certs
SSL_CA_PATH=scos_test_ca.crt
SSL_CERT_PATH=sensor01.pem
SSL_KEY_PATH=sensor01.pem

USB_DEVICE=Tektronix


# Debug dependant settings
if $DEBUG; then
    GUNICORN_LOG_LEVEL=debug
    RAY_record_ref_creation_sites=1
else
    GUNICORN_LOG_LEVEL=info
fi
